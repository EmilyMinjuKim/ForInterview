 1.OS의 역할은?
응용 프로그램에게 메모리 할당

2.자바 메모리 영역에 대하여 설명하시오.
-MA: 메소드의 바이트코드(.class 정보), static 변수가 저장되는 공간
-Call stack: 지역변수, 매개변수(즉, 함수의 정보)
중괄호 내에 할당된 이후에 해당 중괄호를 벗어나면 바로 소멸되는 특성의 데이터 저장.
지역변수와 매개변수는 선언되는 순간에 스택에 저장되었다가 자신이 할당된 영역을 벗어나면 소멸된다.
-heap: 인스턴스(=객체)
인스턴스의 소멸 시점과 방법은 지역변수와 다르기 때문에 힙이라는 별도의 영역이 필요하다.
인스턴스의 가장 합리적인 소멸 시점은 JVM이 결정한다.
아무런 참조변수도 참조하지 않는 상태의 인스턴스는 '소멸의 대상'이 되어 가상머신에 의해 소멸된다. 이러한 소멸 방식을 가비지 컬렉션(Garbage Collection)이라고 한다.

3.Object 클래스가 가지는 각각의 함수는?
finalize 메소드: 인스턴스 소멸
equals 메소드: 인스턴스 비교
clone 메소드: 인스턴스 복사(복제) 

4. 아래와 같이 나오도록 프로그래밍 하시오
==============================

Person person1 = new Person("jeong-pro", 27);
Person person2 = new Person("jeong-pro", 27);

System.out.println(person1.equals(person2));//true 로 반환


class Person {
	private int age;
	public String name = null;
	
	public Person(String name, int age) {
		this.name = name;
		this.age = age;
		
	}
		
	@Override
	public boolean equals(Object obj) {
		if((this.name ==  ((Person)obj).name) && (this.age == ((Person)obj).age)) {
			return true;
		} else {
			return false;
		}
	}
		
	
}

public class ObjectEquality {

	public static void main(String[] args) {
		
		Person person1 = new Person("jeong-pro", 27);
		Person person2 = new Person("jeong-pro", 27);
		
		System.out.println(person1.equals(person2));
	}

}


5.shallow copy 와 deep copy 차이는 무엇인가?
얕은 복사: 참조변수가 지니는 참조 값을 복사. 하지만 참조변수의 참조형 인스턴스만 복사될 뿐 기본형 인스턴스는 복사되지 않는다.
따라서 참조변수의 주소만 복사될 뿐 내용 자체가 따로 방을 잡아 복사되는 것이 아니므로 복사의 대상이 되는 변수의 기본형 인스턴스가 바뀌면 복사를 한 변수의
기본형 인스턴스 값도 따라 바뀐다.
깊은 복사: 참조변수가 참조하는 기본형 인스턴스도 복사한다. 

6.439 19-2 번의 문제를 푸시오.

class Business implements Cloneable {
	private String company;
	private String work;
	public Business (String company, String work) {
		this.company = company;
		this.work = work;
	}
	public void showBusinessInfo() {
		System.out.println("회사 : " + company);
		System.out.println("업무 : " + work);
	}
	
	public void changeBzInfo(String company, String work) {
		this.company = company;
		this.work = work;
	}
	
	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();		//String 인스턴스의 합리적인 복사. 
	}
	
}

class PersonalInfo implements Cloneable {
	private String name;
	private int age;
	private Business bz;
	public PersonalInfo(String name, int age, String company, String work) {
		this.name = name;
		this.age = age;
		bz = new Business(company, work);
	}
	public void showPersonalInfo() {
		System.out.println("이름: " + name);
		System.out.println("나이: " + age);
		bz.showBusinessInfo();
		System.out.println();
	}
	public void changeInfo(String name, int age, String company, String work) {
		this.name = name;
		this.age = age;
		bz.changeBzInfo(company, work);
	}
	
	@Override
	public PersonalInfo clone() throws CloneNotSupportedException {
		return (PersonalInfo)super.clone();		//String 인스턴스의 합리적인 복사. 
		
	}
}

public class ObjectEquality {

	public static void main(String[] args) {
		PersonalInfo person1 = new PersonalInfo("김서방", 30, "마이크로", "소프트");
		PersonalInfo person2;
		
		try {
			person2 = person1.clone();
			person1.changeInfo("김개똥", 28, "애", "플");
			person1.showPersonalInfo();
			person2.showPersonalInfo();
			
			
		} catch (CloneNotSupportedException e) {

			e.printStackTrace();
		}
		

	}

}

7.431page 와 깊은복사의 메모리를 그리시오.
