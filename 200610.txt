1.Collection framework 의 상속 관계를 그리시오.
545 참고

2.List 의 특징은 무엇인가요?
인스턴스의 저장을 목적으로 함.
인스턴스의 저장 순서를 유지하고, 동일한 인스턴스의 중복 저장을 허용한다.
3.ArrayList 와 LinkedList 의 차이는?
ArrayList: 배열 중간에 위치한 인스턴스를 삭제할 경우, 삭제된 위치를 비워 두지 않기 위해 그 뒤에 저장되어 있는 인스턴스들을 한 칸씩 앞으로 이동시킨다.
배열에 저장된 요소에 접근할 때 인덱스 값을 통해 원하는 위치에 바로 접근할 수 있으므로 인스턴스 참조가 빠르다.

LinkedList: 중간에 위치한 인스턴스를 없앨 때 해당 칸을 빼고서 그 칸의 앞과 뒤를 연결한다. 저장공간을 늘리고 저장된 인스턴스를 삭제하는 과정이 단순하다.
하지만 중간에 위치한 인스턴스에 곧바로 접근할 수 없어 참조 과정이 복잡하다.

4.아래의 List 객체에서 순차적 접근방법 3가지로 출력하시오.
-list가 가지는 get
-enhenced for
-iterator 객체

   List<String> list = new LinkedList<>();   
   
   // 컬렉션 인스턴스에 문자열 인스턴스 저장
   list.add("Toy");
   list.add("Box");
   list.add("Robot");
=============


	   	for (int i = 0; i < list.size(); i++) {
		System.out.print(list.get(i) + '\t');
	} System.out.println();
	
		for (String str : list) {
			System.out.print(str + '\t');
		} System.out.println();
		
		Iterator<String> itr = list.iterator();
		
		while(itr.hasNext()) {
			System.out.print(itr.next() + '\t');
		} System.out.println();



5.hasSet을 이용하여 로또 번호를 뽑아내시오.

import java.util.HashSet;
import java.util.Random;

class Num {
	private int num;
	public Num(int num) {
		this.num = num;
	}
	
	@Override
	public String toString() {
		return String.valueOf(num);
	}
	
	@Override
	public int hashCode() {
		return 0;
	}
	
	@Override
	public boolean equals(Object obj) {
		if(num == ((Num)obj).num) {
			return true;
		} else {
			return false;
		}
	}
}

public class Collection {

	public static void main(String[] args) {

		HashSet<Num> set = new HashSet<>();
		Random rand = new Random();
		
		for (int i = 0; i < 6; i++) {
			set.add(new Num(rand.nextInt(44)+1));
		}
		
		for(Num n : set) {
			System.out.print(n.toString() + '\t');
		} 
		
	}

}



6.아래를 인스턴스 수가 2가 나오도록 수정하시오.      
        HashSet<Num> set = new HashSet<>();
        
        set.add(new Num(7799));
        set.add(new Num(9955));
        set.add(new Num(7799));

        System.out.println("인스턴스 수: " + set.size());


class Num {
	private int num;
	public Num(int num) {
		this.num = num;
	}
	
	
	@Override
	public int hashCode() {
		return 0;
	}
	
//만약에 hashCode를 오버라이딩 하지 않으면 equals 메소드가 작동되기도 전에 이미 다른 값이라고 hashSet이 인식.(주소가 다르니까)

	@Override
	public boolean equals(Object obj) {
		if(num == ((Num)obj).num) {
			return true;
		} else {
			return false;
		}
	}
	
}




7.HashSet의 원리를 설명하시오.
hash code로 군집화 -> 그 안에서 equals로 값 비교

8.object 의 hashcode 함수에 대하여 설명하시오.
hashcode 내에서 설정한 조건에 따라 같은 값을 반환하는 인스턴스를 한 묶음으로 분류.

9.아래 태그에 대하여 설명하시오.
- form 태그 및 action 속성 및 method 속성
form: 웹 페이지에서의 입력 양식. <form></form>으로 묶지 않으면 정보가 전달되지 않음.
form태그의 action속성: 폼 데이터(form data)를 서버로 보낼 때 해당 데이터가 도착할 URL을 명시. 폼을 전송할 서버 쪽 스크립트 파일을 지정
method속성: 폼을 서버에 전송할 http 메소드를 정합니다. (GET 또는 POST)

get: header에 사용자가 입력한 정보가 다 노출됨. 정보에 취약.
post: 은닉화. 보안 유지. 헤더에 아무 정보도 노출되지 않음.
name: 나중에 사용자가 입력한 값을 얻어오려면 name으로 호출해야하므로 필요.
value: 선택한 값이 전송됨.

- checkbox 와 radio
checkbox: 체크박스. 다중선택 가능
radio: 동그란 선택 버튼. 하나만 선택 가능. name 속성을 같게 해줘야 함.