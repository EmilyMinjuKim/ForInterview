1.아래를 다형성의 활용하여 프로그래밍 하시오.

-원의 넓이
-사각형 넓이
-삼각형 넓이
==========
3개 넓이의 총합을 구하는 프로그램을 짜시오




class Shape {
	
	double getArea() {
		return 0;
	}
	
}

class Circle extends Shape {
	private int radius;
	Circle(int radius) {
		this.radius = radius;
	}
	public double getArea() {
		return radius * radius * (int)Math.PI;
	}
}

class Rectangle extends Shape {
	private int width, height;
	Rectangle(int width, int height) {
		this.width = width;
		this.height = height;
	}
	public double getArea() {
		return width * height;
	}
}

class Triangle extends Shape {
	private int width, height;
	Triangle(int width, int height) {
		this.width = width;
		this.height = height;
	}
	public double getArea() {
		return width * height / 2;
	}
}



public class Area {

	public static void main(String[] args) {
		
		Shape[] shapes = new Shape[3];
		
		//polymorphism 부모 is a 자식
		int count=0;
		shapes[count++] = new Circle(3);
		shapes[count++] = new Rectangle(3, 4);
		shapes[count++] = new Triangle(5,6);
		
		double totalArea = 0;
		for(Shape shape : shapes) {
			totalArea = totalArea + shape.getArea();
		}
		
		System.out.println(totalArea);
	

	}

}






2. 아래의 출력 결과가 아래와 같이 나오도록 프로그래밍 하시오.
Circle circle = new Circle(10);
Object obj = circle;
System.out.println(obj);
=================
출력: 넓이는 314 입니다.




class Circle {
	private int radius;
	private final double PI = 3.14;
	
	Circle(int radius) {
		this.radius = radius;
	}
	
	@Override	
	public String toString() {				// String은 public으로~!
		return (radius * radius * Math.PI) + "";		// double to String
	}
	
 	
}



public class Test {

	public static void main(String[] args) {

		Circle circle = new Circle(10);
		Object obj = circle;
		System.out.println(obj);
		
	}

}



3.Object 클래스에 대하여 설명하시오.
자바의 모든 클래스는 Object 클래스를 직접 혹은 간접적으로 상속. 자바의 모든 인스턴스에 공통된 기준 및 규약을 적용하기 위함.


4.아래와 같이 출력을 하는 이유에 대하여 설명하시오.
Circle circle = new Circle(10);
System.out.println(circle);
===============
Circle@15db9742



println 함수는 String 클래스를 참조 값으로 받는다. 

그리고 자바의 모든 클래스는 Object 클래스를 직간접적으로 상속하고, Object 클래스에는 String 함수가 정의되어 있다. 

println 함수가 참조 값으로 Circle 클래스를 받았을 때  Circle 클래스에 따로 String함수가 만들어져 있지 않다면(오버라이딩되지 않았다면) 
생략된 부모클래스인 Object의 toString 함수를 가져오게된다. (반면, Circle 클래스에 String함수가 null로 정의되어 있다면 null이 출력된다.)

toString함수는 다음과 같이 정의되어 있다.

public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }

위 코드에 따르면 클래스명과 그 클래스가 위치한 주소가 반환된다.

return -> Circle@15db9742

System.out.println("Circle@15db9742");

그 결과 Circle@15db9742이 출력된다.





6.@Override 에 대하여 설명하시오.

어노테이션. 자바 컴파일러에게 메시지를 전달하는 목적의 메모.
어노테이션이 있으면 컴파일러는 오버라이딩이 제대로 되었는지 확인해준다.


7.interface 에 대하여 설명하시오.
-interface에 올수 있는 두가지는? : 상수, 추상 메소드

상수) public static final의 특성을 가진다.




8.abstract 키워드에 대하여 설명하시오.

추상 메소드 (abstract은 자식이 구현).

추상 메소드에는 구현할 수 있는 몸체가 없다. 
그래서 자식 클래스가 인터페이스의 참조변수를 받아 대신 구현해줘야 한다.