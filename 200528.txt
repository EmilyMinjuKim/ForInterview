  
1. 아래의 2차원 배열의 그림을 그리시오.
int[][] arr = {
   {11, 22, 33},
   {44, 55, 66}, 
   {77, 88, 99}
};


2. 아래를 프로그래밍 하시오.
 - 10 개의 배열을 선언후 1부터 100까지의 수중에서
랜덤하게 생성하여 10개의 배열에 넣는다.
- 아래의 max 변수에 해당 배열의 값중에 최대값을 반환하는 함수를 만드시오. 

int[] arr = new int[10];

int max = getMaxValue(arr); 





import java.util.Random;

public class RandArray {
	
	public static void main(String[] args) {
		Random rand = new Random();
		int[] arr = new int[10];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = rand.nextInt(100)+1;
			System.out.print(arr[i] + "\t");
		}
		System.out.println();
		
		int max = getMaxValue(arr);
		System.out.println(max);
	}
	
	static int getMaxValue(int[] arr) {
 		int val = arr[0];
 		for (int i = 1; i < arr.length; i++) {
			if(arr[i] > val) {
				val = arr[i];
			}
		}
 		return val;

		}

}






3. 아래를 프로그래밍 하시오.
 - 10 개의 배열을 선언후 1부터 100까지의 수중에서
랜덤하게 생성하여 10개의 배열에 넣는다.
- sortArr 에 내림차순으로 sorting 된 배열을 리턴한다.

int[] arr = new int[10];
....
int[] sortArr = getSortDESC(arr) 
.....





import java.util.Random;

public class RandArray {
	
	public static void main(String[] args) {
		Random rand = new Random();
		int[] arr = new int[10];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = rand.nextInt(100)+1;
			System.out.print(arr[i] + "\t");
		}
		System.out.println();
		

		int[] sortArr = getSortDESC(arr);
		
		for (int e : arr) {
			System.out.print(e + "\t");
		}

	}
	
	
	public static int[] getSortDESC(int[] arr) {
		
		int temp = 0;
		
		for (int i = 0; i < arr.length; i++) {
			for (int j = i + 1; j < arr.length; j++) {
				if (arr[i] < arr[j]) {
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		return arr;
	}

}







6. 아래를 프로그래밍 하시오.
 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 
- 해당 배열중 넓이가 최대값을 찾아서 리턴

Rectangle[] rec = new Rectangle[3];
........
Rectangle maxRec = getMaxRec(rec) 
s.o.p("최대사각형 넓이는" +maxRec.getArea())


import java.util.Scanner;

public class Test {

	public static void main(String[] args) {
		Rectangle[] rec = new Rectangle[3];

		for (int i = 0; i < 3; i++) {
			Scanner sc = new Scanner(System.in);
			System.out.println((i+1) + "번 사각형 ");
			
			System.out.println("가로 : ");
			int width = sc.nextInt();
			
			System.out.println("세로 : ");
			int height = sc.nextInt();
			
			rec[i] = new Rectangle(width, height);
		}
		
		Rectangle maxRec = Rectangle.getMaxRec(rec);
		System.out.println("최대사각형 넓이는 " + maxRec.getArea());
		

	}


}


public class Rectangle {
	
	int width, height;
	
	Rectangle (int width, int height) {
		this.width = width;
		this.height = height;
	}
	
	int getArea () {
		return width*height;
	}
	
	public static Rectangle getMaxRec (Rectangle rec[]) {
		Rectangle max = rec[0];
		
		for (Rectangle rect : rec) {
			if(rect.getArea() > max.getArea()) {
				max = rect;
			}
		}
		
		return max;
		
	}

}




7. 아래를 프로그래밍 하시오.
 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 
-  getSortingRec 사각형 배열을 내림차순 정렬한다.
-정렬이 제대로 되었는지 배열에 저장된 객체의 getArea()함수를 순서대로 호출한다.

Rectangle[] rec = new Rectangle[3];
........
Rectangle[] recSorting = getSortingRec(rec) 
......




import java.util.Random;

import java.util.Scanner;

public class Test {

	public static void main(String[] args) {

		Rectangle[] rec = new Rectangle[3];
		
		int width, height;

		for (int i = 0; i < rec.length; i++) {
			Scanner sc = new Scanner(System.in);
			
			System.out.println("#" + (i+1) + "번 사각형#");
			System.out.println("가로 : ");
			width = sc.nextInt();
			System.out.println("세로 : ");
			height = sc.nextInt();
			
			rec[i] = new Rectangle(width, height);
		}
		
		
		Rectangle[] recSorting = Rectangle.getSortingRec(rec);
		
		for (int i = 0; i < recSorting.length; i++) {
			System.out.print(recSorting[i].getArea() + "\t");
		}


	}

}



public class Rectangle {

	private int width, height;
	
	public Rectangle (int width, int height) {
		this.width = width;
		this.height = height;
	}
	
	private int getArea() {
		return width*height;
	}
	
	public static Rectangle[] getSortingRec (Rectangle[] rec) {
		
		Rectangle temp = null;
		
		for (int i = 0; i < rec.length; i++) {
			for (int j = i+1; j < rec.length; j++) {
				
				if(rec[i].getArea() < rec[j].getArea()) {
					temp = rec[i];
					rec[i] = rec[j];
					rec[j] = temp;
				}
			}
		}
		
		return rec;

	}

	

}





6. 상속이란 무엇인가?
Java에서 상속은 부모 클래스의 변수/메소드를 자식 클래스가 물려받아 그대로 사용 가능하게 해준다.

7. 다중상속이란?
둘 이상의 클래스를 상속받는 것. 자바에서는 지원하지 않음.

8. 다음 TV 클래스가 있다.

class TV {
	private int size;
	public TV(int size) { this.size = size; }
	protected int getSize() { return size; }
}

다음 main() 메소드와 실행 결과를 참고하여 TV를 상속받은 ColorTV 클래스를 작성하라.

public static void main(String args[]) {
		colorTV myTV = new ColorTV(32, 1024);
		myTV.printProperty();
	}

=====
출력:32인치 1024컬러


public class ColorPrint {

	public static void main(String[] args) {
		ColorTV myTV = new ColorTV(32, 1024);
		myTV.printProperty();

	}

}


class TV {

	private int size;
	public TV(int size) { this.size = size; }
	protected int getSize() { return size; }
	
}




class ColorTV extends TV {

	private int inch;
	
	public ColorTV(int size, int inch) {
		super(size);
		this.inch = inch;
	}
	
	public int getInch() {
		return inch;
	}

	public void printProperty() {
		System.out.println(getSize() + " " + this.getInch());
	}
}






9. 문제

다음 main() 메소드와 실행 결과를 참고하여 ColorTV를 상속받는 IPTV 클래스를 작성하라.
public static void main(String args[]) {
		IPTV iptv = new IPTV("192.1.1.2", 32, 2048); // "192.1.1.2" 주소에 32인치, 2048 컬러
		iptv.printProperty();
	}
===출력
나의 IPTV는 192.1.1.2 주소의 32 인치 2048컬러






10. 다음은 2차원 상의 한 점을 표현하는 Point 클래스이다.

class Point {
	private int x, y;
	public Point(int x, int y) { this.x = x; this.y = y; }
	public int getX() { return x; }
	public int getY() { return y; }
	protected void move(int x, int y) { this.x = x; this.y = y; }
}

Point를 상속받아 색을 가진 점을 나타내는 ColorPoint 클래스를 작성하라. 다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.
======출력======
RED 색의 (10,20)의 점 입니다.




11.super의 용도 2가지에 대하여 설명하시오.
상위 클래스의 생성자를 명시적으로 호출.
상위 클래스의 함수임을 표시해줌.

12.protected 에 대하여 설명하시오.
상속받은 클래스에서도 유효.