1. 다음을 프로그램 하시오.
interface Printable { // MS가 정의하고 제공한 인터페이스
   public void print(String doc);
}
 SPrinterDriver 와 LPrinterDriver를 만드시오
======================

public static void main(String[] args) {
   String myDoc = "This is a report about...";
   
   // 삼성 프린터로 출력
   Printable prn = new SPrinterDriver();
   prn.print(myDoc);
   System.out.println();

   // LG 프린터로 출력
   prn = new LPrinterDriver();
   prn.print(myDoc);
}


========================================

class SPrinterDriver implements Printable {
	@Override
	public void print(String doc) {
		System.out.println("samsung");
		System.out.println(doc);
	}
}

class LPrinterDriver implements Printable {
	@Override
	public void print(String doc) {
		System.out.println("lg");
		System.out.println(doc);
	}
}




2. interface 문법중 default 에 대하여 설명하시오.
비록 인터페이스 안에서 정의되어도 그 자체로 완전한 메소드이다. 
따라서 구현하는 클래스가 오버라이딩 하지 않아도 된다. 
오직 디폴트 메소드 사용이 필요한 클래스만 이를 오버라이딩하여 사용하면 된다.
디폴트 메소드는 인터페이스에 추상 메소드를 추가해야 하는 상황에서 이전에 개발해 놓은 코드에 영향을 미치지 않기 위해 사용된다.
처음 인터페이스를 설계하는 과정에서 디폴트 메소드를 정의하는 것은 디폴트 메소드의 활용법을 잘못 이해하고 있는 것이다.



3.abstract 클래스에 대하여 설명하시오.
추상 메소드를 하나 이상 가지고 있는 클래스는 추상 클래스로 정의되어야 한다.
추상클래스는 필요에 의해서 일반 메소드와 더불어서 추상화 기능을 가미할 때 쓴다.


4.추상클래스와 interface의 차이는 무엇인가요?
추상클래스보다 인터페이스가 개발의 속도 측면에서 더 우월하다.
추상클래스 코드를 받은 개발자는 클래스 내 멤버 함수나 변수가 작동하는 원리를 숙지해야 추상 메소드를 활용할 수 있지만
인터페이스는 그럴 필요가 없다.

인터페이스의 사용빈도가 상당히 높은데 그 이유중 하나가 동시개발이 가능하므로 시간을 많이 단축시킬수 있다는 점이다. 
인터페이스안의 메소드들은 내용이 없는 상태이나 메소드에 대한 결과값은 내용을 만들지 않아도 미리 알수 있으므로 
인터페이스의 내용을 누군가가 구현하고 있는 동안에 다른 한사람은 그 메소드가 구현되고 나면 작동할 결과값으로 같은 시간에 다른 일을 할수 있으니 개발작업이 한층더 빨라질 수 있다. 
또한 여러사람이 인터페이스를 통해 그런 작업을 동시에 한다고 가정했을때 인터페이스안의 메소드 내용을 변경하더라도 그와 관련된 모든 클래스들을 변경할 필요없이 
해당 메소드의 구현되는 내용만 변경하면 모든 처리가 가능해지므로 일거양득이다.