MySQL

-- select all (*)
SELECT * FROM emp;

-- 비교연산 (WHERE)
SELECT ename, sal FROM emp WHERE sal<3000;

-- 문자로 검색
SELECT empno, ename, sal FROM emp WHERE ename='FORD';

-- 날짜로 검색
SELECT ename FROM emp WHERE TO_CHAR(HIREDATE, 'YYYYMMDD') > '19820101';
SELECT * FROM emp WHERE hiredate >= '1982/01/01';
SELECT * FROM emp WHERE hiredate BETWEEN '1980/01/01' AND '1980/12/31';

-- OR
SELECT * FROM emp WHERE deptno = 10 OR job = 'MANAGER';

-- 커미션이 300/500/1400 중 하나인 사람
SELECT * FROM emp WHERE comm IN (300, 500, 1400);

-- NOT
SELECT * FROM emp WHERE deptno <> 10;
SELECT * FROM emp WHERE sal not BETWEEN 2000 AND 3000;

-- 이름이 F로 시작하는 모든 사람
SELECT * FROM emp WHERE ename LIKE 'F%';

-- 위치 상관없이 이름 중에 A가 들어가는 사람
SELECT * FROM emp WHERE ename LIKE '%A%';

-- 이름이 N으로 끝나는 사람
SELECT * FROM emp WHERE ename LIKE '%N';

-- 두 번째 글자가 A인 사원(언더바 하나)
SELECT * FROM emp WHERE ename LIKE '_A%';

-- 세 번째 글자가 A인 사원(언더바 두 개)
SELECT * FROM emp WHERE ename LIKE '__A%'; 

-- 이름에 A를 포함하지 않는 사람
SELECT * FROM emp WHERE ename not LIKE '%A%';

-- NULL 연산자
SELECT * FROM emp WHERE comm IS NULL;
SELECT * FROM emp WHERE comm IS not NULL;

-- order by절 / 사원들의 급여를 오름차순으로 정렬
SELECT * FROM emp ORDER BY sal ASC;
SELECT * FROM emp ORDER BY sal DESC;

-- 가장 최근에 입사한 사원부터 출력
SELECT * FROM emp ORDER BY hiredate DESC;

-- 사원들이 소속되어 있는 부서 번호를 '중복없이' 출력
SELECT DISTINCT deptno FROM emp;

-- 테스트용 테이블 (DUAL)
-- 산술연산의 결과를 한 줄로 출력하기 위해서 오라클에서 제공하는 테이블.
-- sysdate: 오늘 날짜
SELECT 24*60 FROM DUAL;
SELECT sysdate FROM DUAL; 

-- 절대값 ABS
SELECT ABS(-10) FROM DUAL;

-- 소수점 내림 FLOOR
SELECT FLOOR(34.5432) FROM DUAL;

-- 소수점 반올림 ROUND
SELECT ROUND(34.5432) FROM DUAL;

-- 특정 자리수에서 반올림(34.54)
SELECT ROUND(34.5432, 2) FROM DUAL;

-- 소수점 아래 버림 TRUNC
SELECT TRUNC(34.5432, 2), TRUNC(34.5432, -1), TRUNC(34.5432), TRUNC(34.5432, 0) FROM DUAL;

-- 나눗셈 후 나머지 결과를 되돌려주는 함수 MOD
SELECT MOD(27, 2), MOD(27, 5), MOD(27, 7) FROM DUAL;

-- 대문자 변환 함수 UPPER <-> LOWER
-- 별칭 as: column명 
SELECT 'Welcome to Oracle' as "적용전", UPPER('Welcome to Oracle') as "적용후" FROM DUAL;

-- 문자 수 세기 LENGTH // B는 바이트 크기(영문 1, 그 외 3 바이트)
SELECT LENGTH('Oracle'), LENGTH('오라클') FROM DUAL; 
SELECT LENGTHB('Oracle'), LENGTHB('오라클') FROM DUAL;

-- 특정 문자의 위치를 구하는 함수 INSTR
SELECT INSTR('Welcome to Oracle', 'O') FROM DUAL;

-- index 4부터 시작해서 문자 3개를 추출하는 쿼리문(오라클에서 인덱스는 0이 아닌 1부터 시작한다) SUBSTR
SELECT SUBSTR('Welcome to Oracle', 4, 3) FROM DUAL;

-- 사원들의 입사일에서 입사년도와 입사달을 출력하는 쿼리문
-- date형 문자도 substring으로 잘라낼 수 있음.
-- 19|| : 잘라낸 문자 앞에 19를 붙이는 것.
SELECT ename, 19||SUBSTR(HIREDATE, 1, 2) as 년도, SUBSTR(HIREDATE, 4, 2) as 달 FROM emp;

-- 문자열 자리 20개 중 #을 왼쪽에 채우고 나머지를 ORACLE로 채우기 (LPAD)
-- 오른쪽 RPAD
SELECT LPAD('ORACLE', 20, '#') FROM DUAL;

-- 공백 문자 삭제 LTRIM, RTRIM
-- TRIM은 양 사이드 공백 없애기
SELECT LTRIM(' ORACLE') FROM DUAL;

-- 출력값: ORACLE
SELECT TRIM('a' FROM 'aaaaORACLEaaaa') FROM DUAL;

-- 날짜 연산
SELECT SYSDATE -1 FROM DUAL;
SELECT SYSDATE -1 어제, SYSDATE 오늘, SYSDATE +1 내일 FROM DUAL;

-- 각 직원들이 근무한 개월 수
SELECT ename, sysdate, hiredate,
trunc(MONTHS_BETWEEN(sysdate, hiredate)) 근무개월수 from emp;

-- 입사날짜에서 4개월 추가
SELECT ename, hiredate, trunc(ADD_MONTHS(hiredate, 4)) from emp;

--해당 달의 마지막 날짜 반환
SELECT ename, hiredate, LAST_DAY(hiredate) from emp;
SELECT LAST_DAY(sysdate) 이번달마지막날 from dual;

-- 형 변환 함수
-- 현재 날짜를 문자형으로 변환
SELECT TO_CHAR(sysdate, 'YYYY-MM-DD') from dual;

-- 현재 날짜와 시간
SELECT TO_CHAR(sysdate, 'YYYY-MM-DD HH24:MI:SS') 시간 from dual;

-- 각 지역별 통화 기호를 앞에 붙이고 천 단위마다 콤마를 붙여서 출력하는 쿼리문(예: $1,400,000)
SELECT ename, sal , TO_CHAR(sal, 'L9999,999') from emp;

-- TO_DATE
SELECT ename, hiredate from emp where hiredate=TO_DATE(19810220, 'YYYYMMDD');

-- 올해 며칠이 지났는지 현재 날짜에서 2016/01/01을 뺀 값
SELECT trunc(sysdate - TO_DATE('2016/01/01', 'YYYY/MM/DD')) from dual;

-- TO_NUMBER
SELECT TO_NUMBER('20,000', '99,999') - TO_NUMBER('10,000', '99,999') from dual;

-- null을 다른 값으로 변환하는 NVL함수
SELECT ename, sal, NVL(comm,0), job from emp order by job;

--case 함수
SELECT ename, deptno, 
                        CASE WHEN deptno=10 THEN 'ACCOUNTING'
                            WHEN deptno=20 THEN 'RESEARCH'
                            WHEN deptno=30 THEN 'SALES'
                            WHEN deptno=40 THEN 'OPERATING'
                        END as 부서명
FROM emp;

-- 그룹 함수
-- 전체 사원 급여의 합
SELECT sum(sal) from emp;

--급여 평균
SELECT avg(sal) from emp;

--가장 높은 급여, 낮은 급여
SELECT max(sal), min(sal) from emp;

-- 사원 테이블의 사원들 중 커미션을 받는 사원의 수
select count(comm) from emp;

-- 중복 제거를 반영하여 담당 업무의 개수를 구하는 쿼리문
select count(distinct(job)) from emp;

--group by 절, having 절
--특정 칼럼을 기준으로 그룹화
--부서 번호 출력
select DISTINCT deptno from emp;
select deptno from emp GROUP BY deptno;

-- 소속 부서별 급여 평균
select trunc(AVG(sal)), deptno from emp GROUP BY deptno;

--group by에 대한 조건은 having으로
SELECT deptno, avg(sal) from emp GROUP BY deptno HAVING avg(sal) >= 2000;

--부서의 salary 최대값, 최소값을 구하되 최대 급여가 2000 이상인 부서만 출력
SELECT deptno, min(sal), max(sal) from emp GROUP BY deptno HAVING avg(sal) >= 2000;

--각 사원이 소속된 부서의 이름
select ename, dname from emp, dept where emp.deptno = dept.deptno;

--NON EQUI JOIN 비등가 조인
--각 사원의 급여가 몇 등급인지
SELECT ename, sal, grade FROM emp, salgrade WHERE sal BETWEEN losal AND hisal ORDER BY sal;

--사원이름, 소속 부서명, 급여등급
select ename, dname, grade from emp, salgrade, dept where (sal between losal and hisal) and (emp.deptno = dept.deptno);

--SELF JOIN
--이름이 smith인 사람의 매니저 이름
SELECT employee.ename||'의 매니저는 '|| manager.ename||'입니다.' 
from emp employee, emp manager where employee.mgr = manager.empno;

--OUTER JOIN
--조인 조건에 만족하지 못하더라도 해당 로우를 나타내고 싶을 때 사용
SELECT emp.ename, dept.dname FROM emp, dept WHERE emp.deptno(+) = dept.deptno;

--ANSI sql
--OUTER 생략가능
SELECT ename, dname FROM emp LEFT OUTER JOIN dept ON emp.deptno = dept.deptno;

--사원들의 이름, 부서번호, 부서이름 출력
SELECT ename, e.deptno, dname FROM emp e, dept d WHERE e.deptno = d.deptno;

--'DALLAS'에서 근무하는 사원의 이름, 직위, 부서번호, 부서이름
SELECT ename, e.job, e.deptno, dname FROM emp e, dept d WHERE e.deptno = d.deptno AND d.loc = 'DALLAS';

--이름에 'A'가 들어가는 사람들의 이름과 부서이름
SELECT ename, dname FROM emp e, dept d WHERE e.deptno = d.deptno AND ename LIKE '%A%';

--사원이름, 부서명, 월급 출력 -> 월급이 3000이상
SELECT ename, dname, e.sal FROM emp e, dept d WHERE e.deptno = d.deptno AND e.sal >= 3000;

--커미션이 책정된 사원들의 사원번호, 이름, 연봉, 연봉+커미션, 급여등급을 출력하되, 
--각 컬럼명을 사원번호, 사원이름, 연봉, 실급여, 급여등급으로 하여 출력
SELECT deptno 사원번호, ename 사원이름, sal*12 연봉, sal*12+NVL(comm, 0) 실급여, grade 급여등급
FROM emp e, salgrade s WHERE sal BETWEEN losal AND hisal;

--단일행 서브쿼리: 서브쿼리를 수행한 결과가 1건
--Allen이 속한 부서의 이름 JOIN없이 출력 : SUB-QUERY
SELECT dname FROM dept WHERE deptno = (SELECT deptno FROM emp WHERE ename = 'ALLEN');

--사원들의 평균 급여보다 더 많은 급여를 받는 사원
SELECT ename FROM emp WHERE sal > (SELECT avg(sal) FROM emp);

--Allen의 급여보다 동일하거나 더 많이 급여를 받는 사원
SELECT ename, sal FROM emp WHERE sal >= (SELECT sal FROM emp WHERE ename='ALLEN') AND ename != 'ALLEN';

--다중행 연산자 IN : 서브쿼리가 두 개 이상일 때
--연봉을 3000이상 받는 사원이 소속된 부서와 동일한 부서에서 근무하는 사원들의 정보
SELECT deptno, ename, sal FROM emp WHERE deptno IN (SELECT DISTINCT deptno FROM emp WHERE sal >= 3000);

--ANY, SOME
--부서 번호가 30번인 사람들의 급여 중 가장 낮은 값보다 높은 급여를 받는 사원 이름, 급여
SELECT ename, sal FROM emp WHERE sal > ANY(SELECT sal FROM emp WHERE deptno = 30);

--A로 시작하는 사원이름, 급여
SELECT ename, sal FROM emp WHERE ename LIKE 'A%';

--EMP TABLE에서 급여가 가장 높은 사람의 사번, 성명, 부서명, 급여
SELECT e.deptno, ename, dname, sal FROM emp e, dept d WHERE e.deptno = d.deptno
AND sal = (SELECT max(sal) FROM emp);

--각 부서별로 급여 서열 2위까지 부서코드, 이름 출력
SELECT deptno, ename, sal FROM emp a
WHERE 2 > (SELECT count(*) FROM emp WHERE sal > a.sal AND deptno = a.deptno) ORDER BY deptno, sal DESC;

--SELECT count(*) FROM emp 출력하면 12, 총 인원 수
--최종적으로 출력하는 곳은 emp a. WHERE절에서 sal>a.sal이 의미하는 것은 나보다 월급이 높은 사람의 수
-- 그 수가 2보다 작다는 수는 내 급여 서열이 2위 안이라는 뜻

--부서별로 그룹하여 부서번호, 인원수, 급여 평균, 급여  합을 구하여 출력
--평균은 소수 둘째 자리에서 반올림
SELECT deptno 부서번호, count(ename) 인원수, round(avg(sal), 1) 급여평균, sum(sal) 급여합 
FROM emp GROUP BY deptno ORDER BY deptno ASC;

--부서별 급여 평균
SELECT dname 부서명, round(avg(sal), 1) 급여평균 FROM emp e, dept d 
WHERE e.deptno = d.deptno GROUP BY dname;

--부서별로 급여 총합을 나타내고자 한다. 10번 부서보다 급여 평균이 많은 부서만 출력하시오.
SELECT deptno, sum(sal) FROM emp GROUP BY deptno 
HAVING trunc(avg(sal)) > (SELECT trunc(avg(sal)) FROM emp WHERE deptno = 10);

--기존 테이블 전체 복사
CREATE TABLE emp02 as SELECT * from emp;

--데이터는 빼고 테이블 구조만 복사: 거짓 조건을 주면 됨.
CREATE TABLE emp05 as SELECT * from emp WHERE 1 = 0;

--ALTER
--기존 테이블의 구조 변경을 위한 DDL명령문
ALTER TABLE emp01 ADD(JOB VARCHAR(9));

--기존 테이블 구조 수정: MODIFY
ALTER TABLE emp01 MODIFY(JOB VARCHAR(30));

--기존 컬럼 삭제: DROP
ALTER TABLE emp01 DROP COLUMN JOB;

테이블 삭제와 무결성 제약 조건
: 삭제하고자 하는 테이블의 기본 키나 고유 키를 다른 테이블에서 참조해서 사용하는 경우에는 해당 테이블을 제거할 수 없다.
이러한 경우에는 참조하는 테이블들을 먼저 제거한 후에 해당 테이블을 삭제해야 한다.

--테이블의 모든 로우를 제거: TRUNCATE TABLE
TRUNCATE TABLE EMP02;

--테이블명 변경: RENAME
RENAME emp05 TO test;

데이터 딕셔너리: DB 자원을 효율적으로 관리하기 위한 다양한 정보를 저장하는 시스템 테이블
DESC USER_TABLES;

--INSERT "커밋 반드시!!"
INSERT INTO dept02(deptno, dname, loc) VALUES(10, 'ACCOUNTING', 'NEW YORK');
COMMIT;

--INSERT 구문을 이용하여 컬럼명 생략
DESC dept02;
--desc에서 순서 보고 거기에 맞춰서 써주기
INSERT INTO dept02 VALUES(20, 'RESEARCH', 'DALLAS');
commit;

--UPDATE: 테이블에 저장된 데이터를 수정하기 위해서 사용하는 명령문.
--모든 사원의 부서 번호를 30번으로 수정 후 확인
UPDATE emp01 SET deptno=30;

--사원의 급여를 10% 인상시키는 UPDATE문
UPDATE emp01 SET sal = sal * 1.1;
SELECT * from emp01;

--모든 입사일을 오늘로 수정하는 쿼리문
UPDATE emp01 SET hiredate = sysdate;

--부서 번호가 10번인 사원의 부서 번호를 40번으로 수정하고 확인
UPDATE emp01 SET deptno = 40 WHERE deptno = 10;

--job컬럼 값이 manager인 경우 급여를 10% 인상
UPDATE emp01 SET sal = sal * 1.1 WHERE job = 'manager';

--emp테이블에서 job별로 급여 평균을 출력하고자 한다
--'salesman'이라는 job보다 급여 평균이 큰 job만 출력하시오
SELECT job 직무, round(avg(sal), 2) 평균급여 FROM emp GROUP BY job 
HAVING avg(sal) > (SELECT avg(sal) FROM emp WHERE job = 'SALESMAN');

--primary query -> auto incremental
--mvc_board_seq.nextval
create sequence mbc_board_seq;

--DDL
--EML
--DCL

--생성한 dept01 부서 테이블의 모든 데이터를 삭제
delete from dept01;

--부서명이 sales인 부서의 번호부터 알아낸 뒤 sales부서 소속의 사원을 삭제
delete from emp01 where deptno = (select deptno from dept where dname = 'SALES');

--emp 테이블에 같은 이름이 있는 사원의 사원번호와 이름을 출력하세요

--이름에 a가 들어가는 사원과 같은 직업을 가진 사원의 이름, 월급, 부서번호
SELECT ename, sal, deptno from emp where job in (select job from emp where ename like '%A%');

--DALLAS에서 근무하는 사원과 직업이 일치하는 사원의 이름, 부서명, 급여 출력
SELECT ename, dname, sal from emp e, dept d WHERE e.deptno = d.deptno 
and job in (SELECT job from emp WHERE deptno = (SELECT deptno from dept WHERE loc = 'DALLAS'));


--ename으로 정렬시킨 후 rownum으로 불러오기

select rownum
    , x.*
    from ( select a.*
            from emp a
            order by a.ename
    ) x;


--rownum  범위주고 그 범위 내 rownum만 출력하기

select * from (
    select rownum as rnum, a.* from (
        select * from mvc_board order by bGroup desc, bStep asc
    ) a where rownum <= 20
) where rnum > 10;
