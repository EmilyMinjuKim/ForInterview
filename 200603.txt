1.아래의 메모리를 정확히 그리시오.
		Rectangle[] recArr = new Rectangle[3];
		Scanner scanner= null;
		
		for(int i=0;i<3;i++) {
			scanner = new Scanner(System.in);
			int width = scanner.nextInt();
			int height = scanner.nextInt();
			recArr[i] = new Rectangle(width, height);
		}
		
		
		Rectangle maxRec = Rectangle.getMaxRec(recArr);

=======================
public static Rectangle getMaxRec(Rectangle[] recArr) {
		Rectangle maxRec = recArr[0];
		
		for(Rectangle rec: recArr) {			
			if(maxRec.getArea() < rec.getArea()) {
				maxRec = rec;
			}		
		}
		
		for(int i=0 ; i <recArr.length; i++) {			
			if(maxRec.getArea() < recArr[i].getArea()) {
				maxRec = recArr[i];
			}		
		}		
		return maxRec;		
	}
 
2. 예외와 에러의 다른점은?
에러: 자바 프로그램이 임의의 파일에 저장된 데이터를 읽는 중에 하드디스크에 물리적 오류가 발생하여 더 이상 파일에 저장된 데이터를 읽을 수 없을 때 발생.
예외: 발생하더라도 수습할 수 있는 비교적 덜 심각한 오류. 입력 값에 대한 처리가 불가능하거나, 프로그램 실행 중에 참조된 값이 잘못된 경우 등 정상적인 프로그램의 흐름을 어긋나는 것.
예외는 프로그래머가 적절히 코드를 작성해주면 프로그램의 비정상적인 종료를 막을 수 있다.

3. 예외에 대한 클래스 상속도를 간단하게 그리시오.

4.예전의 계산기 프로그램이 아래와 같이 에러가 난다. 예외처리를 구문을 적용하여, 죽지 않게 만드시오.

첫번째 숫자를 넣으세요:1
연산기호를 넣으세요:/
두번째 숫자를 넣으세요:3
1 / 3 = 0
continue? Y or N:y
첫번째 숫자를 넣으세요:1
연산기호를 넣으세요:/
두번째 숫자를 넣으세요:0
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at Calculator.execute(Calculator.java:34)
	at CalculatorTest.main(CalculatorTest.java:69)




==================================================================================
import java.util.InputMismatchException;
import java.util.Scanner;

public class MyCalculator {

	public static void main(String[] args) {
		
		Calculator.execute();
		
	}
	
}

class Calculator {
	
	public static int getPlus (int n1, int n2){
		return n1 + n2;
	}
	
	public static int getMinus (int n1, int n2){
		return n1 - n2;
	}
	
	public static int getMulti (int n1, int n2){
		return n1 * n2;
	}
	
	public static int getDivi (int n1, int n2){
		return n1 / n2;
	}
	
	public static void execute() {
		
		int n1, n2;
		char op, answer;
		boolean process = true;
		
		
			
		while(process) {
			
			try {
			
			Scanner sc = new Scanner(System.in);
			System.out.print("첫번째 숫자를 넣으세요 : ");
			n1 = sc.nextInt();
			System.out.print("연산 기호를 넣으세요 : ");
			op = sc.next().charAt(0);
			System.out.print("두번째 숫자를 넣으세요 : ");
			n2 = sc.nextInt();
		

			switch(op) {
			case '+':
				System.out.println(n1 + " + " + n2 + " = " + Calculator.getPlus(n1, n2));
				break;

			case '-':
				System.out.println(n1 + " - " + n2 + " = " + Calculator.getMinus(n1, n2));
				break;

			case '*':
				System.out.println(n1 + " * " + n2 + " = " + Calculator.getMulti(n1, n2));
				break;
	
			case '/':
				System.out.println(n1 + " / " + n2 + " = " + Calculator.getDivi(n1, n2));
				break;
			
			default:
				System.out.println("잘못된 문자를 입력했습니다.");

			}
			
			System.out.println("conitnue? Y / N : ");
			answer = sc.next().charAt(0);
			if(answer == 'Y' || answer == 'y') {
				process = true;
			} else if(answer == 'N' || answer == 'n') {
				process = false;
			} else {
				process = false;
				System.out.println("잘못된 문자를 입력했습니다.");
			}
			
		} catch(ArithmeticException e) {
			System.out.println("0으로 나눌 수 없습니다.");
			continue;
		} catch(InputMismatchException e) {
			System.out.println("잘못된 문자를 입력했습니다.");
			continue;
		}
		
		}

		System.out.println("시스템을 종료합니다.");

	}
	
}

5.예외처리 에서, 아래의 용어를 설명하시오.

		checked Excetpion				 unchecked Exception
확인 시점		컴파일 시점				런타임 시점
처리 여부		반드시 예외 처리				명시적으로 하지 않아도 됨
트랜젝션 처리	예외 발생시 롤백(roll back)하지 않음		예외 발생시 롤백해야 함
종류		IOException, ClassNotFoundException 등	NullPointException, ClassCastException 등
RuntimeException	상속하지 않음				상속함			
		
-finally: try ~ catch ~ finally에서 코드 실행이 try 안으로 진입하면, 무조건 실행된다. try에서 예외가 발생하건 안 하건, catch가 실행되건 안되건, 무조건.

-throws: 예외의 처리를 이 메소드를 호출한 메소드에게 넘긴다는 의미.
